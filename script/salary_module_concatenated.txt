// Combined content of Salary Module files
// Generated on: 2025-06-04T12:26:05.212Z

// --- Start of File: salary-profile.module.ts ---

import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { SalaryProfile, SalaryProfileSchema } from './schemas/salary-profile.schema';
import { SalaryProfileService } from './salary-profile.service';
import { SalaryProfileController } from './salary-profile.controller';

@Module({
  imports: [MongooseModule.forFeature([{ name: SalaryProfile.name, schema: SalaryProfileSchema }])],
  controllers: [SalaryProfileController],
  exports: [SalaryProfileService],
  providers: [SalaryProfileService],
})
export class SalaryProfileModule {}


// --- End of File: salary-profile.module.ts ---

// --- Start of File: schemas/salary-profile.schema.ts ---

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

@Schema({ timestamps: true })
export class SalaryProfile extends Document {
  @Prop({ required: true, type: Types.ObjectId, unique: true })
  employeeId: Types.ObjectId;

  @Prop({ required: true })
  employeeName: string;

  @Prop({
    type: {
      base: Number,
      hourlyRate: Number,
      currency: String,
      payFrequency: String,
      additions: [
        {
          title: { type: Types.ObjectId, required: true },
          amount: { type: Number, required: true },
          description: { type: String, default: '' },
        }
      ],
      deductions: [
        {
          title: { type: Types.ObjectId, required: true },
          amount: { type: Number, required: true },
          description: { type: String, default: '' },
        }
      ],
      paymentMethod: {
        type: String,
        bankName: String,
        routingNumber: String,
        accountNumber: String,
      }
    }
  })
  current: {
    base: number;
    hourlyRate: number;
    currency: string;
    payFrequency: string;
    additions: {
      title: Types.ObjectId;
      amount: number;
      description?: string;
    }[];
    deductions: {
      title: Types.ObjectId;
      amount: number;
      description?: string;
    }[];
    paymentMethod: {
      type: string;
      bankName: string;
      routingNumber: string;
      accountNumber: string;
    };
  };

  @Prop({
    type: [{
      base: Number,
      hourlyRate: Number,
      currency: String,
      payFrequency: String,
      additions: [
        {
          title: { type: Types.ObjectId, required: true },
          amount: { type: Number, required: true },
          description: { type: String, default: '' },
        }
      ],
      deductions: [
        {
          title: { type: Types.ObjectId, required: true },
          amount: { type: Number, required: true },
          description: { type: String, default: '' },
        }
      ],
      paymentMethod: {
        type: String,
        bankName: String,
        routingNumber: String,
        accountNumber: String,
      },
      effectiveDate: Date,
      reason: String,
      approvedBy: String,
      changedAt: { type: Date, default: Date.now }
    }],
    default: []
  })
  history: {
    base: number;
    hourlyRate: number;
    currency: string;
    payFrequency: string;
    additions: {
      title: Types.ObjectId;
      amount: number;
      description?: string;
    }[];
    deductions: {
      title: Types.ObjectId;
      amount: number;
      description?: string;
    }[];
    paymentMethod: {
      type: string;
      bankName: string;
      routingNumber: string;
      accountNumber: string;
    };
    effectiveDate: Date;
    reason: string;
    approvedBy: string;
    changedAt: Date;
  }[];
}

export const SalaryProfileSchema = SchemaFactory.createForClass(SalaryProfile);


// --- End of File: schemas/salary-profile.schema.ts ---

// --- Start of File: dto/create-salary-profile.dto.ts ---

import { IsNotEmpty, IsString, IsNumber, IsArray, ValidateNested } from 'class-validator';
import { Type } from 'class-transformer';

class AdditionDto {
  @IsNotEmpty() @IsString() title: string;
  @IsNotEmpty() @IsNumber() amount: number;
  @IsString() description?: string;
}

class DeductionDto {
  @IsNotEmpty() @IsString() title: string;
  @IsNotEmpty() @IsNumber() amount: number;
  @IsString() description?: string;
}

class PaymentMethodDto {
  @IsNotEmpty() @IsString() type: string;
  @IsNotEmpty() @IsString() bankName: string;
  @IsNotEmpty() @IsString() routingNumber: string;
  @IsNotEmpty() @IsString() accountNumber: string;
}

export class CreateSalaryProfileDto {
  @IsNotEmpty() @IsString() employeeId: string;
  @IsNotEmpty() @IsString() employeeName: string;

  @IsNumber() base: number;
  @IsNumber() hourlyRate: number;
  @IsString() currency: string;
  @IsString() payFrequency: string;

  @IsArray() @ValidateNested({ each: true }) @Type(() => AdditionDto)
  additions: AdditionDto[];

  @IsArray() @ValidateNested({ each: true }) @Type(() => DeductionDto)
  deductions: DeductionDto[];

  @ValidateNested() @Type(() => PaymentMethodDto)
  paymentMethod: PaymentMethodDto;
}


// --- End of File: dto/create-salary-profile.dto.ts ---

// --- Start of File: dto/increment-salary-profile.dto.ts ---

import { IsNotEmpty, IsString, IsNumber, IsArray, ValidateNested, IsDate } from 'class-validator';
import { Type } from 'class-transformer';

class AdditionDto {
  @IsNotEmpty()
  @IsString()
  title: string;

  @IsNotEmpty()
  @IsNumber()
  amount: number;

  @IsString()
  description?: string;
}

class DeductionDto {
  @IsNotEmpty()
  @IsString()
  title: string;

  @IsNotEmpty()
  @IsNumber()
  amount: number;

  @IsString()
  description?: string;
}

class PaymentMethodDto {
  @IsNotEmpty()
  @IsString()
  type: string;

  @IsNotEmpty()
  @IsString()
  bankName: string;

  @IsNotEmpty()
  @IsString()
  routingNumber: string;

  @IsNotEmpty()
  @IsString()
  accountNumber: string;
}

export class IncrementSalaryProfileDto {
  @IsNotEmpty()
  @IsNumber()
  base: number;

  @IsNotEmpty()
  @IsNumber()
  hourlyRate: number;

  @IsNotEmpty()
  @IsString()
  currency: string;

  @IsNotEmpty()
  @IsString()
  payFrequency: string;

  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => AdditionDto)
  additions: AdditionDto[];

  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => DeductionDto)
  deductions: DeductionDto[];

  @ValidateNested()
  @Type(() => PaymentMethodDto)
  paymentMethod: PaymentMethodDto;

  @IsNotEmpty()
  @IsString()
  reason: string;

  @IsNotEmpty()
  @IsString()
  approvedBy: string;

  @IsNotEmpty()
  @IsDate()
  @Type(() => Date)
  effectiveDate: Date;
}


// --- End of File: dto/increment-salary-profile.dto.ts ---

// --- Start of File: salary-profile.service.ts ---

import { Injectable, Logger, NotFoundException, InternalServerErrorException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { SalaryProfile } from './schemas/salary-profile.schema';
import { CreateSalaryProfileDto } from './dto/create-salary-profile.dto';
import { IncrementSalaryProfileDto } from './dto/increment-salary-profile.dto';
import { Salary } from '../salary/schemas/salary.schema';

@Injectable()
export class SalaryProfileService {
  private readonly logger = new Logger(SalaryProfileService.name);

  constructor(@InjectModel(SalaryProfile.name) private readonly model: Model<SalaryProfile>) {}

  async create(dto: CreateSalaryProfileDto): Promise<SalaryProfile> {
    try {
      return await this.model.create({
        employeeId: dto.employeeId,
        employeeName: dto.employeeName,
        current: {
          base: dto.base,
          hourlyRate: dto.hourlyRate,
          currency: dto.currency,
          payFrequency: dto.payFrequency
        },
        history: []
      });
    } catch (err) {
      this.logger.error('Failed to create salary profile', err.stack);
      throw new InternalServerErrorException('Failed to create salary profile');
    }
  }

  async createFromSalary(salary: Salary): Promise<void> {
  const exists = await this.model.findOne({ employeeId: salary.employeeId });

  if (exists) {
    this.logger.log(`Salary profile already exists for employeeId: ${salary.employeeId}`);
    return;
  }

  const profile = new this.model({
    employeeId: salary.employeeId,
    employeeName: salary.employeeName,
    // current: {
    //   base: salary.salary.base,
    //   hourlyRate: salary.salary.hourlyRate,
    //   currency: salary.salary.currency,
    //   payFrequency: salary.salary.payFrequency,
    // },
    history: [],
  });

  await profile.save();
  this.logger.log(`Salary profile created for employee: ${salary.employeeName}`);
}


  async increment(employeeId: string, dto: IncrementSalaryProfileDto): Promise<SalaryProfile> {
    try {
      const profile = await this.model.findOne({ employeeId });
      if (!profile) throw new NotFoundException('Salary profile not found');

      profile.history.push({
        ...profile.current,
        effectiveDate: dto.effectiveDate,
        reason: dto.reason,
        approvedBy: dto.approvedBy,
        changedAt: new Date()
      });

      profile.current.base = dto.base;
      profile.current.hourlyRate = dto.hourlyRate;

      return await profile.save();
    } catch (err) {
      this.logger.error(`Increment failed for employeeId: ${employeeId}`, err.stack);
      throw err;
    }
  }

  async getProfile(employeeId: string): Promise<SalaryProfile> {
    try {
      const profile = await this.model.findOne({ employeeId });
      if (!profile) throw new NotFoundException('Salary profile not found');
      return profile;
    } catch (err) {
      this.logger.error(`Failed to retrieve profile for employeeId: ${employeeId}`, err.stack);
      throw err;
    }
  }
}


// --- End of File: salary-profile.service.ts ---

// --- Start of File: salary-profile.controller.ts ---

import { Controller, Post, Body, Param, Patch, Get, Logger } from '@nestjs/common';
import { SalaryProfileService } from './salary-profile.service';
import { CreateSalaryProfileDto } from './dto/create-salary-profile.dto';
import { IncrementSalaryProfileDto } from './dto/increment-salary-profile.dto';

@Controller('salary-profile')
export class SalaryProfileController {
  private readonly logger = new Logger(SalaryProfileController.name);

  constructor(private readonly service: SalaryProfileService) {}

  @Post()
  async create(@Body() dto: CreateSalaryProfileDto) {
    this.logger.log('Creating salary profile');
    return this.service.create(dto);
  }

  @Patch(':employeeId/increment')
  async increment(@Param('employeeId') employeeId: string, @Body() dto: IncrementSalaryProfileDto) {
    this.logger.log(`Incrementing salary for employeeId: ${employeeId}`);
    return this.service.increment(employeeId, dto);
  }

  @Get(':employeeId')
  async get(@Param('employeeId') employeeId: string) {
    this.logger.log(`Fetching salary profile for employeeId: ${employeeId}`);
    return this.service.getProfile(employeeId);
  }
}


// --- End of File: salary-profile.controller.ts ---

